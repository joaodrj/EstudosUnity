//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/MeuControle.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MeuControle: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MeuControle()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MeuControle"",
    ""maps"": [
        {
            ""name"": ""Personagem"",
            ""id"": ""6402c7a6-0477-4bf5-b63c-10a58a6ac033"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dfa009f3-1a2e-4ba1-9cca-741624b1a0a6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5606c910-6aad-4fb4-ad13-9e748332e773"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""fb0e7ac8-70e9-484d-bb40-36bb97c5c488"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""1d052f9b-58c1-4660-a1d8-87af574cad6d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b4b18f2f-1116-4fa6-b4d3-43b8cfc95d06"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dc4f6a78-2877-4fc1-abe4-5cf620215aef"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4dbfb44c-b56c-4a51-acd1-998ba28bf155"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""96323eb7-65a3-470b-a4cf-7ce1143926c6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""86a0377c-a90b-4842-9cf9-fd00ecbad2f0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ad97184-1f2c-42fb-a320-fb1564c2653c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Personagem
        m_Personagem = asset.FindActionMap("Personagem", throwIfNotFound: true);
        m_Personagem_Move = m_Personagem.FindAction("Move", throwIfNotFound: true);
        m_Personagem_Jump = m_Personagem.FindAction("Jump", throwIfNotFound: true);
        m_Personagem_Fire = m_Personagem.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Personagem
    private readonly InputActionMap m_Personagem;
    private List<IPersonagemActions> m_PersonagemActionsCallbackInterfaces = new List<IPersonagemActions>();
    private readonly InputAction m_Personagem_Move;
    private readonly InputAction m_Personagem_Jump;
    private readonly InputAction m_Personagem_Fire;
    public struct PersonagemActions
    {
        private @MeuControle m_Wrapper;
        public PersonagemActions(@MeuControle wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Personagem_Move;
        public InputAction @Jump => m_Wrapper.m_Personagem_Jump;
        public InputAction @Fire => m_Wrapper.m_Personagem_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Personagem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PersonagemActions set) { return set.Get(); }
        public void AddCallbacks(IPersonagemActions instance)
        {
            if (instance == null || m_Wrapper.m_PersonagemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PersonagemActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IPersonagemActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IPersonagemActions instance)
        {
            if (m_Wrapper.m_PersonagemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPersonagemActions instance)
        {
            foreach (var item in m_Wrapper.m_PersonagemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PersonagemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PersonagemActions @Personagem => new PersonagemActions(this);
    public interface IPersonagemActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
